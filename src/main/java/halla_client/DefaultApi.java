/**
 * Halla I/O
 * <p><strong>Getting Started:</strong></p> <ol type=\"1\"> <li><p>Obtain Credentials (Please Contact Halla to Obtain Credentials):</p> <ol type=\"a\"> <li><p><strong>'serviceAccount'</strong>: Add your Service Account in the <strong>header</strong> for all API requests to the Halla services. This is used to track API usage for authorization, billing, etc.</p></li> <li><p><strong>'key'</strong>: Add your API Key to the <strong>query</strong> for all API requests to the Halla services. This is used as a first line of defense to authenticate API requests.</p></li> </ol></li> <li><p>Add Your Catalog:</p> <ol type=\"a\"> <li><p>Use the <strong>POST STORE</strong> route to create a virtual product catalog. Please add a minimum of 1 <strong>thousand products per store</strong>, each with a <strong>'primaryId'</strong> and <strong>'label'</strong>. This will trigger Halla to index the catalog, allowing for Recommendation, Substitution, and Search services within minutes.</p></li> </ol></li> <li><p>Get Recommendations:</p> <ol type=\"a\"> <li><p>Use the <strong>GET PRODUCTS</strong> route and set the strategy to <strong>'recommend'</strong>.</p></li> <li><p>Fill in the <strong>'storeId'</strong> query parameter to use a specific catalog.</p></li> <li><p>Provide <strong>one or more</strong> of the following query parameters:</p> <ol type=\"i\"> <li><p><strong>'productId'</strong>: Biases recommendations to be relevant for a specific product.</p></li> <li><p><strong>'cartProductIds'</strong>: Biases recommendations to be relevant for all products in the cart.</p></li> <li><p><strong>'consumerId'</strong>: Biases recommendations to be relevant for the consumer's previous browsing and past purchase history.</p></li> </ol></li> <li><p>If multiple inputs are given, the recommendations will be blended to best satisfy multiple constraints.</p></li> </ol></li> <li><p>Get Substitutions:</p> <ol type=\"a\"> <li><p>Use the <strong>GET PRODUCTS</strong> route and set the strategy to <strong>'substitute'</strong>.</p></li> <li><p>Fill in the <strong>'storeId'</strong> query parameter to use a specific catalog.</p></li> <li><p>Fill in the <strong>'productId'</strong> query parameter.</p></li> </ol></li> <li><p>Get Search Results:</p> <ol type=\"a\"> <li><p>Use the <strong>GET PRODUCTS</strong> route and set the strategy to <strong>'search'</strong>.</p></li> <li><p>Fill in the <strong>'storeId'</strong> query parameter to use a specific catalog.</p></li> <li><p>Fill in the <strong>'text'</strong> query parameter.</p></li> </ol></li> <li><p>Supercharge Performance with Purchases:</p> <ol type=\"a\"> <li><p>Use the <strong>POST ORDER</strong> route to add one or more transactions to our system. Transactions will be used to fine tune our models to provide a better experience for your shoppers. To enable advanced personalization, please provide the <strong>'consumerId'</strong> field.</p></li> </ol></li> </ol> <p><strong>Advanced Integration:</strong></p> <ul> <li><p>Integrate Multi-Tenant Capabilities:</p> <ul> <li><p>Ensure that store and product <strong>ids</strong> are <strong>globally unique</strong> across all tenants. If needed, tenant name can be appended to the id in question to guarantee uniqueness.</p></li> <li><p>Attach <strong>'brand'</strong> field to allow for better personalization at scale.</p></li> </ul></li> <li><p>Enable Real-Time Inventory:</p> <ul> <li><p>Integrate the <strong>POST STORE</strong> route into your inventory management solution and do one of the following:</p> <ul> <li><p>Call the <strong>POST STORE</strong> route at regular intervals to overwrite existing store data.</p></li> <li><p>Call the <strong>ADD / DELETE</strong> product from store routes to update the catalog upon changes and current availabilities.</p></li> </ul></li> </ul></li> <li><p>(BETA) Enable Advanced Filtering:</p> <ul> <li><p>To enable SNAP, Own-Brand, Sponsored Product and other custom filters, create multiple virtual stores for each real store location. Each virtual store should correspond to a subset of products to include in the filter. Store ids can be generated by prepending the filter identifier to your store id.</p></li> </ul></li> <li><p>(BETA) Run an A/B Test:</p> <ul> <li><p>Work with your Halla Support Rep to define the scope of your A/B test.</p></li> <li><p>Call the <strong>POST ORDER</strong> route to add purchases with which to evaluate.</p></li> <li><p>If you are <strong>tracking spend</strong> between test groups, then it is <strong>required</strong> to attach the <strong>'campaign'</strong> field in the request body of the order.</p></li> <li><p>If you are <strong>testing at the consumer level</strong>, then it is <strong>required</strong> to attach the <strong>'consumerId'</strong> field in the request body of the order.</p></li> </ul></li> <li><p>(BETA) Add Fulfillment Data:</p> <ul> <li><p>Call the <strong>POST ORDER</strong> route multiple times corresponding to when an order is placed and later fulfilled. Set the <strong>'code'</strong> attribute in each item to <strong>'purchased' or 'fulfilled'</strong> corresponding to the order status.</p></li> </ul></li> </ul> 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package halla_client;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Orders;
import io.swagger.client.model.Updates;
import io.swagger.client.model.Products;
import io.swagger.client.model.Store;
import io.swagger.client.model.ProductRecommendation;
import io.swagger.client.model.Product;
import io.swagger.client.model.SearchTerm;
import io.swagger.client.model.InlineResponse200;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addOrders */
    private com.squareup.okhttp.Call addOrdersCall(String serviceAccount, Orders orders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = orders;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling addOrders(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/orders".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Adds new orders, updating associated consumer profiles to allow for real-time personalization.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param orders The orders to create. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrders(String serviceAccount, Orders orders) throws ApiException {
        addOrdersWithHttpInfo(serviceAccount, orders);
    }

    /**
     * 
     * Adds new orders, updating associated consumer profiles to allow for real-time personalization.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param orders The orders to create. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrdersWithHttpInfo(String serviceAccount, Orders orders) throws ApiException {
        com.squareup.okhttp.Call call = addOrdersCall(serviceAccount, orders, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Adds new orders, updating associated consumer profiles to allow for real-time personalization.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param orders The orders to create. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrdersAsync(String serviceAccount, Orders orders, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrdersCall(serviceAccount, orders, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addProductsToManyStores */
    private com.squareup.okhttp.Call addProductsToManyStoresCall(String serviceAccount, Updates updates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updates;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling addProductsToManyStores(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores/products".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Bulk method to apply product updates across multiple stores. Note: OVERWRITE will remove products with matching product ids in stores not provided in the request.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param updates The updates to apply. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addProductsToManyStores(String serviceAccount, Updates updates) throws ApiException {
        addProductsToManyStoresWithHttpInfo(serviceAccount, updates);
    }

    /**
     * 
     * Bulk method to apply product updates across multiple stores. Note: OVERWRITE will remove products with matching product ids in stores not provided in the request.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param updates The updates to apply. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addProductsToManyStoresWithHttpInfo(String serviceAccount, Updates updates) throws ApiException {
        com.squareup.okhttp.Call call = addProductsToManyStoresCall(serviceAccount, updates, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Bulk method to apply product updates across multiple stores. Note: OVERWRITE will remove products with matching product ids in stores not provided in the request.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param updates The updates to apply. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProductsToManyStoresAsync(String serviceAccount, Updates updates, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProductsToManyStoresCall(serviceAccount, updates, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addProductsToStore */
    private com.squareup.okhttp.Call addProductsToStoreCall(String serviceAccount, String sid, Products products, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = products;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling addProductsToStore(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling addProductsToStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores/{sid}/products".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Adds one or more products to a store. This method will create a new store if the store id does not exist and will index the newly created products, letting these products be used as input to the Halla services.  Notes:  -Halla will perform best on inventories between 1,000 and 50,000 products.  -Primary product ids persist across multiple stores for a given client.  -Never before seen products will be added in minutes.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param products The products to create. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addProductsToStore(String serviceAccount, String sid, Products products) throws ApiException {
        addProductsToStoreWithHttpInfo(serviceAccount, sid, products);
    }

    /**
     * 
     * Adds one or more products to a store. This method will create a new store if the store id does not exist and will index the newly created products, letting these products be used as input to the Halla services.  Notes:  -Halla will perform best on inventories between 1,000 and 50,000 products.  -Primary product ids persist across multiple stores for a given client.  -Never before seen products will be added in minutes.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param products The products to create. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addProductsToStoreWithHttpInfo(String serviceAccount, String sid, Products products) throws ApiException {
        com.squareup.okhttp.Call call = addProductsToStoreCall(serviceAccount, sid, products, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Adds one or more products to a store. This method will create a new store if the store id does not exist and will index the newly created products, letting these products be used as input to the Halla services.  Notes:  -Halla will perform best on inventories between 1,000 and 50,000 products.  -Primary product ids persist across multiple stores for a given client.  -Never before seen products will be added in minutes.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param products The products to create. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProductsToStoreAsync(String serviceAccount, String sid, Products products, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProductsToStoreCall(serviceAccount, sid, products, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addStore */
    private com.squareup.okhttp.Call addStoreCall(String serviceAccount, Store store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = store;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling addStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Creates / overwrites a store with a distinct catalog. Notes: -Halla will perform best on inventories between 1,000 and 50,000 products. -Primary product ids persist across multiple stores for a given client.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param store The store to create. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addStore(String serviceAccount, Store store) throws ApiException {
        addStoreWithHttpInfo(serviceAccount, store);
    }

    /**
     * 
     * Creates / overwrites a store with a distinct catalog. Notes: -Halla will perform best on inventories between 1,000 and 50,000 products. -Primary product ids persist across multiple stores for a given client.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param store The store to create. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addStoreWithHttpInfo(String serviceAccount, Store store) throws ApiException {
        com.squareup.okhttp.Call call = addStoreCall(serviceAccount, store, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Creates / overwrites a store with a distinct catalog. Notes: -Halla will perform best on inventories between 1,000 and 50,000 products. -Primary product ids persist across multiple stores for a given client.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param store The store to create. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStoreAsync(String serviceAccount, Store store, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStoreCall(serviceAccount, store, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteStore */
    private com.squareup.okhttp.Call deleteStoreCall(String serviceAccount, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling deleteStore(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores/{sid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Deletes store data.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStore(String serviceAccount, String sid) throws ApiException {
        deleteStoreWithHttpInfo(serviceAccount, sid);
    }

    /**
     * 
     * Deletes store data.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStoreWithHttpInfo(String serviceAccount, String sid) throws ApiException {
        com.squareup.okhttp.Call call = deleteStoreCall(serviceAccount, sid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Deletes store data.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStoreAsync(String serviceAccount, String sid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStoreCall(serviceAccount, sid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getProducts */
    private com.squareup.okhttp.Call getProductsCall(String strategy, String serviceAccount, String text, String productId, String cartProductIds, String consumerId, String storeId, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'strategy' is set
        if (strategy == null) {
            throw new ApiException("Missing the required parameter 'strategy' when calling getProducts(Async)");
        }
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling getProducts(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/products".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (strategy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "strategy", strategy));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (productId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "productId", productId));
        if (cartProductIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cartProductIds", cartProductIds));
        if (consumerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "consumerId", consumerId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeId", storeId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Real-time, contextual product recommendation, substitution and search. Returns a list of products with attached relevance scores.
     * @param strategy Determines which service should be used for this request. Choose from recommend, substitute, or search. (required)
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param text Text input if search strategy is selected. (optional)
     * @param productId Subscriber specific product identifier to recommend based on. Required for substitution strategy. (optional)
     * @param cartProductIds A comma delimited string of subscriber specific product identifiers for a consumer&#39;s current cart. If productId is not passed in the query, then recommendations will be based on the cartProductIds. If a productId is passed in the query, then cartProductIds will be used to improve recommendation relevance. (optional)
     * @param consumerId Subscriber specific consumer identifier to personalize recommendations. If productId and cartProductIds are not passed in the query, then recommendations will be based on previous consumer behavior. (optional)
     * @param storeId Subscriber specific store identifier, selecting the catalog of products to recommend from. If storeId is invalid or is not passed in the query, then recommendations will be sourced from the subscriber&#39;s master product list. (optional)
     * @param limit Upper bound on the number of products to return. Default &#x3D; 15. Max &#x3D; 30. (optional)
     * @return List&lt;ProductRecommendation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProductRecommendation> getProducts(String strategy, String serviceAccount, String text, String productId, String cartProductIds, String consumerId, String storeId, Integer limit) throws ApiException {
        ApiResponse<List<ProductRecommendation>> resp = getProductsWithHttpInfo(strategy, serviceAccount, text, productId, cartProductIds, consumerId, storeId, limit);
        return resp.getData();
    }

    /**
     * 
     * Real-time, contextual product recommendation, substitution and search. Returns a list of products with attached relevance scores.
     * @param strategy Determines which service should be used for this request. Choose from recommend, substitute, or search. (required)
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param text Text input if search strategy is selected. (optional)
     * @param productId Subscriber specific product identifier to recommend based on. Required for substitution strategy. (optional)
     * @param cartProductIds A comma delimited string of subscriber specific product identifiers for a consumer&#39;s current cart. If productId is not passed in the query, then recommendations will be based on the cartProductIds. If a productId is passed in the query, then cartProductIds will be used to improve recommendation relevance. (optional)
     * @param consumerId Subscriber specific consumer identifier to personalize recommendations. If productId and cartProductIds are not passed in the query, then recommendations will be based on previous consumer behavior. (optional)
     * @param storeId Subscriber specific store identifier, selecting the catalog of products to recommend from. If storeId is invalid or is not passed in the query, then recommendations will be sourced from the subscriber&#39;s master product list. (optional)
     * @param limit Upper bound on the number of products to return. Default &#x3D; 15. Max &#x3D; 30. (optional)
     * @return ApiResponse&lt;List&lt;ProductRecommendation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProductRecommendation>> getProductsWithHttpInfo(String strategy, String serviceAccount, String text, String productId, String cartProductIds, String consumerId, String storeId, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getProductsCall(strategy, serviceAccount, text, productId, cartProductIds, consumerId, storeId, limit, null, null);
        Type localVarReturnType = new TypeToken<List<ProductRecommendation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Real-time, contextual product recommendation, substitution and search. Returns a list of products with attached relevance scores.
     * @param strategy Determines which service should be used for this request. Choose from recommend, substitute, or search. (required)
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param text Text input if search strategy is selected. (optional)
     * @param productId Subscriber specific product identifier to recommend based on. Required for substitution strategy. (optional)
     * @param cartProductIds A comma delimited string of subscriber specific product identifiers for a consumer&#39;s current cart. If productId is not passed in the query, then recommendations will be based on the cartProductIds. If a productId is passed in the query, then cartProductIds will be used to improve recommendation relevance. (optional)
     * @param consumerId Subscriber specific consumer identifier to personalize recommendations. If productId and cartProductIds are not passed in the query, then recommendations will be based on previous consumer behavior. (optional)
     * @param storeId Subscriber specific store identifier, selecting the catalog of products to recommend from. If storeId is invalid or is not passed in the query, then recommendations will be sourced from the subscriber&#39;s master product list. (optional)
     * @param limit Upper bound on the number of products to return. Default &#x3D; 15. Max &#x3D; 30. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductsAsync(String strategy, String serviceAccount, String text, String productId, String cartProductIds, String consumerId, String storeId, Integer limit, final ApiCallback<List<ProductRecommendation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductsCall(strategy, serviceAccount, text, productId, cartProductIds, consumerId, storeId, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProductRecommendation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProductsFromStore */
    private com.squareup.okhttp.Call getProductsFromStoreCall(String serviceAccount, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling getProductsFromStore(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling getProductsFromStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores/{sid}/products".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Gets all products in a store.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Product> getProductsFromStore(String serviceAccount, String sid) throws ApiException {
        ApiResponse<List<Product>> resp = getProductsFromStoreWithHttpInfo(serviceAccount, sid);
        return resp.getData();
    }

    /**
     * 
     * Gets all products in a store.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Product>> getProductsFromStoreWithHttpInfo(String serviceAccount, String sid) throws ApiException {
        com.squareup.okhttp.Call call = getProductsFromStoreCall(serviceAccount, sid, null, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all products in a store.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductsFromStoreAsync(String serviceAccount, String sid, final ApiCallback<List<Product>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductsFromStoreCall(serviceAccount, sid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSearchTerms */
    private com.squareup.okhttp.Call getSearchTermsCall(String text, String serviceAccount, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling getSearchTerms(Async)");
        }
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling getSearchTerms(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/searchTerms".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Grocery specific autocomplete for search.
     * @param text Text to autocomplete. (required)
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param limit Upper bound on the number of search terms to return. Default &#x3D; 15. Max &#x3D; 30. (optional)
     * @return List&lt;SearchTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SearchTerm> getSearchTerms(String text, String serviceAccount, Integer limit) throws ApiException {
        ApiResponse<List<SearchTerm>> resp = getSearchTermsWithHttpInfo(text, serviceAccount, limit);
        return resp.getData();
    }

    /**
     * 
     * Grocery specific autocomplete for search.
     * @param text Text to autocomplete. (required)
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param limit Upper bound on the number of search terms to return. Default &#x3D; 15. Max &#x3D; 30. (optional)
     * @return ApiResponse&lt;List&lt;SearchTerm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SearchTerm>> getSearchTermsWithHttpInfo(String text, String serviceAccount, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getSearchTermsCall(text, serviceAccount, limit, null, null);
        Type localVarReturnType = new TypeToken<List<SearchTerm>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Grocery specific autocomplete for search.
     * @param text Text to autocomplete. (required)
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param limit Upper bound on the number of search terms to return. Default &#x3D; 15. Max &#x3D; 30. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchTermsAsync(String text, String serviceAccount, Integer limit, final ApiCallback<List<SearchTerm>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchTermsCall(text, serviceAccount, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SearchTerm>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStore */
    private com.squareup.okhttp.Call getStoreCall(String serviceAccount, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling getStore(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling getStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores/{sid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Gets store data.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Product> getStore(String serviceAccount, String sid) throws ApiException {
        ApiResponse<List<Product>> resp = getStoreWithHttpInfo(serviceAccount, sid);
        return resp.getData();
    }

    /**
     * 
     * Gets store data.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Product>> getStoreWithHttpInfo(String serviceAccount, String sid) throws ApiException {
        com.squareup.okhttp.Call call = getStoreCall(serviceAccount, sid, null, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets store data.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreAsync(String serviceAccount, String sid, final ApiCallback<List<Product>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreCall(serviceAccount, sid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreIds */
    private com.squareup.okhttp.Call getStoreIdsCall(String serviceAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling getStoreIds(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Gets all store ids.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 getStoreIds(String serviceAccount) throws ApiException {
        ApiResponse<InlineResponse200> resp = getStoreIdsWithHttpInfo(serviceAccount);
        return resp.getData();
    }

    /**
     * 
     * Gets all store ids.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> getStoreIdsWithHttpInfo(String serviceAccount) throws ApiException {
        com.squareup.okhttp.Call call = getStoreIdsCall(serviceAccount, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all store ids.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreIdsAsync(String serviceAccount, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreIdsCall(serviceAccount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeProductFromStore */
    private com.squareup.okhttp.Call removeProductFromStoreCall(String serviceAccount, String sid, String pid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceAccount' is set
        if (serviceAccount == null) {
            throw new ApiException("Missing the required parameter 'serviceAccount' when calling removeProductFromStore(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling removeProductFromStore(Async)");
        }
        
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling removeProductFromStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/stores/{sid}/products/{pid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sid" + "\\}", apiClient.escapeString(sid.toString()))
        .replaceAll("\\{" + "pid" + "\\}", apiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (serviceAccount != null)
        localVarHeaderParams.put("serviceAccount", apiClient.parameterToString(serviceAccount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Removes a product from a store.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param pid Subscriber specific product id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeProductFromStore(String serviceAccount, String sid, String pid) throws ApiException {
        removeProductFromStoreWithHttpInfo(serviceAccount, sid, pid);
    }

    /**
     * 
     * Removes a product from a store.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param pid Subscriber specific product id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeProductFromStoreWithHttpInfo(String serviceAccount, String sid, String pid) throws ApiException {
        com.squareup.okhttp.Call call = removeProductFromStoreCall(serviceAccount, sid, pid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Removes a product from a store.
     * @param serviceAccount Identifies the serviceAccount for authorization purposes. (required)
     * @param sid Subscriber specific store id (required)
     * @param pid Subscriber specific product id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeProductFromStoreAsync(String serviceAccount, String sid, String pid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeProductFromStoreCall(serviceAccount, sid, pid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
